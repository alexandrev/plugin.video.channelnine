import os
import sys
import urllib2
import xbmc
import xbmcgui
import xbmcplugin
import socket
from channelnine.addon import ADDON, ADDON_ID, CHANNEL9_URL

try:
    import simplejson as json
except ImportError:
    import json
import xml.etree.ElementTree as ET

HANDLE = int(sys.argv[1])

class closing(object):
    def __init__(self, thing):
        self.thing = thing
    def __enter__(self):
        return self.thing
    def __exit__(self, *exc_info):
        self.thing.close()


class NoRedirectHandler(urllib2.HTTPRedirectHandler):
    def http_error_302(self, req, fp, code, msg, headers):
        import urllib
        infourl = urllib.addinfourl(fp, headers, headers["Location"])
        infourl.status = code
        infourl.code = code
        return infourl
    http_error_300 = http_error_302
    http_error_301 = http_error_302
    http_error_303 = http_error_302
    http_error_307 = http_error_302


def _xml(url):
    with closing(urllib2.urlopen(url)) as response:
        if response.code >= 300 and response.code <= 307:
            item = xbmcgui.ListItem(path=response.geturl(), thumbnailImage=xbmc.getInfoLabel("ListItem.Art(thumb)"))
            xbmcplugin.setResolvedUrl(HANDLE, True, item)
            return
        payload = response.read()
        if payload:
            return ET.fromstring(payload)


def run(url_suffix=""):
    socket.setdefaulttimeout(300)
    urllib2.install_opener(urllib2.build_opener(NoRedirectHandler()))
    url = CHANNEL9_URL
    data = _xml(url)
    if data is None:
        return

    rootTag = data.tag
    xbmc.log("Root tag: "+rootTag)
    iconImage = ""
    listitems = range(len(data.findall('.//item')))
    for item in data.findall('.//item'):
        xbmc.log("Iterating through elements")
        title = item.find("title").text
        listItem = xbmcgui.ListItem(label=title, label2=item.find("description").text, iconImage=iconImage, thumbnailImage=item.find("{http://search.yahoo.com/mrss/}thumbnail").get("url"))
        listItem.setInfo(type="Video",infoLabels={"Title": title})
        listItem.setProperty("isPlayable", "true")
        group = item.find("{http://search.yahoo.com/mrss/}group")
        path = None
        video_quality = xbmcplugin.getSetting(int(sys.argv[1]), "videoQuality")
        if group is not None:
            content = group.findall("{http://search.yahoo.com/mrss/}content")
            if content is not None:
                for content_type in content:
                    other_path = content_type.get("url")
                    if content_type.get("medium") == "video" and content_type.get("type") == "video/mp4":
                        if video_quality == "High" and "_high" in other_path:
                            path = content_type.get("url")
                            break
                        elif video_quality == "Medium" and "_mid" in other_path:
                            path = content_type.get("url")
                            break
                        elif video_quality == "Mobile" and "mobile" in other_path:
                            path = content_type.get("url")
                            break
                        elif video_quality == "Any" and "mobile" not in other_path:
                            path = content_type.get("url")
                            break
        if path is not None:
            xbmcplugin.addDirectoryItem(HANDLE, path, listItem)
    xbmc.log("Finished parsing items")
    xbmcplugin.endOfDirectory(HANDLE)
    return 1
